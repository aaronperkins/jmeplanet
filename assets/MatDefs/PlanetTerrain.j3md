MaterialDef PlanetTerrain {

        // Parameters to material:
        // regionXColorMap: X = 1..4 the texture that should be appliad to state X
        // regionX: a Vector3f containing the following information:
        //      regionX.x: the start height of the region
        //      regionX.y: the end height of the region
        //      regionX.z: the texture scale for the region
        //  it might not be the most elegant way for storing these 3 values, but it packs the data nicely :)
	MaterialParameters {
		Texture2D region1ColorMap
		Texture2D region2ColorMap
		Texture2D region3ColorMap
		Texture2D region4ColorMap
		Vector3 region1
		Vector3 region2
		Vector3 region3
		Vector3 region4
                Vector4 baseColor
                Vector3 patchCenter
                Float planetRadius

                // Ambient color
                Color Ambient (MaterialAmbient)

                // Use the provided ambient, diffuse, and specular colors
                Boolean UseMaterialColors
	}

	Technique {
                LightMode MultiPass
		VertexShader GLSL100:   MatDefs/PlanetTerrain.vert
		FragmentShader GLSL100: MatDefs/PlanetTerrain.frag

		WorldParameters {
			WorldViewProjectionMatrix
			WorldMatrix
			NormalMatrix
                        WorldViewMatrix
                        ViewMatrix
		}

                Defines {
                        MATERIAL_COLORS : UseMaterialColors
                }
	}

	Technique FixedFunc {
        }

}